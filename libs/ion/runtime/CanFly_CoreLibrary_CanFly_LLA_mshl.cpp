//-----------------------------------------------------------------------------
//
//    ** DO NOT EDIT THIS FILE! **
//    This file was generated by a tool
//    re-running the tool will overwrite this file.
//
//-----------------------------------------------------------------------------

#include "../canflylib/CanFly_CoreLibrary.h"
#include "CanFly_CoreLibrary_CanFly_LLA.h"

using namespace canflylib::CanFly_CoreLibrary;


HRESULT Library_CanFly_CoreLibrary_CanFly_LLA::_ctor___VOID__R4__R4__R4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        float param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_float( stack, 1, param0 ) );

        float param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_float( stack, 2, param1 ) );

        float param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_float( stack, 3, param2 ) );

        LLA::.ctor( param0, param1, param2, hr );
        NANOCLR_CHECK_HRESULT( hr );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_LLA::get_Lat___R4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        float retValue = LLA::get_Lat(  hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_float( stack, retValue );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_LLA::set_Lat___VOID__R4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        float param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_float( stack, 1, param0 ) );

        LLA::set_Lat( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_LLA::get_Lng___R4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        float retValue = LLA::get_Lng(  hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_float( stack, retValue );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_LLA::set_Lng___VOID__R4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        float param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_float( stack, 1, param0 ) );

        LLA::set_Lng( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_LLA::get_Alt___R4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        float retValue = LLA::get_Alt(  hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_float( stack, retValue );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_LLA::set_Alt___VOID__R4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        float param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_float( stack, 1, param0 ) );

        LLA::set_Alt( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );

    }
    NANOCLR_NOCLEANUP();
}

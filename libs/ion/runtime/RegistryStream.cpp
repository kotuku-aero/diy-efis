//-----------------------------------------------------------------------------
//
//    ** DO NOT EDIT THIS FILE! **
//    This file was generated by a tool
//    re-running the tool will overwrite this file.
//
//-----------------------------------------------------------------------------

#include "CanFly_CoreLibrary.h"
#include "CanFly_CoreLibrary_CanFly_RegistryStream.h"

using namespace canflylib::CanFly_CoreLibrary;


HRESULT Library_CanFly_CoreLibrary_CanFly_RegistryStream::RegStreamOpen___STATIC__U4__U4__STRING( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        unsigned int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 0, param0 ) );

        const char* param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_LPCSTR( stack, 1, param1 ) );

        unsigned int retValue = RegistryStream::RegStreamOpen( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_UINT32( stack, retValue );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_RegistryStream::RegStreamCreate___STATIC__U4__U4__STRING( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        unsigned int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 0, param0 ) );

        const char* param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_LPCSTR( stack, 1, param1 ) );

        unsigned int retValue = RegistryStream::RegStreamCreate( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_UINT32( stack, retValue );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_RegistryStream::RegStreamClose___STATIC__VOID__U4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        unsigned int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 0, param0 ) );

        RegistryStream::RegStreamClose( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_RegistryStream::RegStreamDelete___STATIC__VOID__U4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        unsigned int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 0, param0 ) );

        RegistryStream::RegStreamDelete( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_RegistryStream::RegStreamEof___STATIC__BOOLEAN__U4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        unsigned int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 0, param0 ) );

        bool retValue = RegistryStream::RegStreamEof( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retValue );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_RegistryStream::RegStreamRead___STATIC__SZARRAY_U1__U4__U2( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        unsigned int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 0, param0 ) );

        uint16_t param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT16( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 retValue = RegistryStream::RegStreamRead( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_UINT8_ARRAY( stack, retValue );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_RegistryStream::RegStreamWrite___STATIC__VOID__U4__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        unsigned int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT8 param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 1, param1 ) );

        RegistryStream::RegStreamWrite( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_RegistryStream::RegStreamGetPos___STATIC__U4__U4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        unsigned int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 0, param0 ) );

        unsigned int retValue = RegistryStream::RegStreamGetPos( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_UINT32( stack, retValue );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_RegistryStream::RegStreamSetPos___STATIC__VOID__U4__U4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        unsigned int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 0, param0 ) );

        unsigned int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 1, param1 ) );

        RegistryStream::RegStreamSetPos( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_RegistryStream::RegStreamLength___STATIC__U4__U4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        unsigned int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 0, param0 ) );

        unsigned int retValue = RegistryStream::RegStreamLength( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_UINT32( stack, retValue );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_RegistryStream::RegStreamTruncate___STATIC__VOID__U4__U4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        unsigned int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 0, param0 ) );

        unsigned int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 1, param1 ) );

        RegistryStream::RegStreamTruncate( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_RegistryStream::RegStreamCopy___STATIC__VOID__U4__U4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        unsigned int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 0, param0 ) );

        unsigned int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 1, param1 ) );

        RegistryStream::RegStreamCopy( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_CanFly_CoreLibrary_CanFly_RegistryStream::RegStreamPath___STATIC__STRING__U4__BOOLEAN( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {

        unsigned int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 0, param0 ) );

        bool param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_bool( stack, 1, param1 ) );

        const char* retValue = RegistryStream::RegStreamPath( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_LPCSTR( stack, retValue );
    }
    NANOCLR_NOCLEANUP();
}
